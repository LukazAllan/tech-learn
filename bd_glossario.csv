"Python","Python é uma linguagem de programação de alto nível, de propósito geral e de código aberto. Foi criada por Guido van Rossum e seu desenvolvimento começou em 1989, com a primeira versão lançada em 1991. Python é conhecida por sua sintaxe clara, legibilidade de código e versatilidade."
"Flask","Flask é um framework web leve e flexível para Python. Ele foi criado por Armin Ronacher e lançado pela primeira vez em 2010. Flask é conhecido por sua simplicidade e facilidade de uso, proporcionando as ferramentas necessárias para construir aplicativos web de forma rápida e eficiente."
"CSV","CSV (Comma-Separated Values) é um formato de arquivo simples usado para armazenar dados tabulares (como uma planilha ou banco de dados) em um formato de texto simples, onde cada linha do arquivo representa uma linha da tabela e os valores são separados por vírgulas ou outros delimitadores."
"Listas","Estrutura de dados mutável e ordenada que permite elementos duplicados."
"Tuplas","Estrutura de dados imutável e ordenada, semelhante a listas, mas não pode ser alterada após criação."
"Dicionários","Estrutura de dados que armazena pares chave-valor, mutável e não ordenada (a partir do Python 3.7+ é ordenada por inserção)."
"Sets","Estrutura de dados mutável, não ordenada e que não permite elementos duplicados."
"Funções","Blocos de código reutilizáveis que executam uma tarefa específica quando chamados."
"Lambdas","Funções anônimas definidas com a palavra-chave `lambda`, usadas para operações simples."
"Compreensão de Listas","Sintaxe concisa para criar listas a partir de iteráveis, com condicionais opcionais."
"Módulos","Arquivos Python que contêm código reutilizável, como funções, classes e variáveis."
"Pacotes","Diretórios que contêm múltiplos módulos, identificados pelo arquivo `__init__.py`."
"POO (Programação Orientada a Objetos)","Paradigma que usa classes e objetos para estruturar o código de forma modular."
"Classes","Estruturas que definem objetos, contendo atributos e métodos."
"Herança","Mecanismo que permite uma classe herdar atributos e métodos de outra classe."
"Polimorfismo","Capacidade de diferentes classes responderem ao mesmo método de formas distintas."
"Encapsulamento","Prática de restringir o acesso a certos componentes de um objeto, usando métodos getters/setters."
"Decoradores","Funções que modificam o comportamento de outras funções ou métodos sem alterar seu código."
"Geradores","Funções que produzem sequências de valores lazy (sob demanda) usando `yield`."
"Iteradores","Objetos que permitem percorrer coleções elemento a elemento usando `__iter__` e `__next__`."
"Tratamento de Exceções","Uso de `try`, `except`, `finally` para lidar com erros durante a execução."
"Context Managers (with)","Gerenciadores de recursos que garantem liberação adequada usando `__enter__` e `__exit__`."
"Namespaces","Espaços que mapeiam nomes para objetos, como escopo local, global e built-in."
"Escopo de Variáveis","Região do código onde uma variável é acessível (local, enclosing, global, built-in)."
"Args e Kwargs","Sintaxe para passar número variável de argumentos posicionais (*args) ou nomeados (**kwargs)."
"f-Strings","Sintaxe moderna para formatação de strings, permitindo expressões embutidas (Python 3.6+)."
"Formatação de Strings","Métodos como `format()` ou `%` para inserir valores dinamicamente em strings."
"Manipulação de Arquivos","Operações como `open()`, `read()`, `write()` para ler/escrever arquivos."
"JSON","Manipulação de dados no formato JSON usando `json.loads()` e `json.dumps()`."
"Datetime","Módulo para manipular datas, horas e intervalos temporais."
"Virtualenv","Ferramenta para criar ambientes virtuais isolados de Python."
"PIP","Gerenciador de pacotes padrão para instalar bibliotecas externas."
"List Slicing","Sintaxe para acessar subconjuntos de listas usando índices [start:stop:step]."
"Zip","Função que combina múltiplos iteráveis em pares (retorna um iterador)."
"Enumerate","Função que retorna índices e valores de um iterável em pares (útil em loops)."
"Any e All","Funções que retornam `True` se qualquer (`any`) ou todos (`all`) os elementos de um iterável forem verdadeiros."
"Collections","Módulo que oferece estruturas especializadas (e.g., `defaultdict`, `Counter`, `namedtuple`)."
"itertools","Módulo com funções para iteração eficiente (e.g., `product`, `permutations`, `cycle`)."
"Async/Await","Sintaxe para programação assíncrona, permitindo operações não-bloqueantes."
"Threading e Multiprocessing","Módulos para concorrência (threads) e paralelismo (processos)."
"Global e Nonlocal","Palavras-chave para modificar escopo de variáveis em funções aninhadas."
"Closures","Funções que ""lembram"" variáveis do escopo onde foram definidas, mesmo após sair dele."
"Metaclasses","Classes que definem o comportamento de outras classes (e.g., `type`)."
"Dunder Methods","Métodos especiais (__init__, __str__, etc.) que definem comportamentos de objetos."
"Desempacotamento","Atribuição de valores de sequências a variáveis individuais (e.g., `a, b = (1, 2)`)."
"Operadores de Associação","`in` e `not in` para verificar se um elemento está em um iterável."
"Operadores de Identidade","`is` e `is not` para comparar se objetos ocupam a mesma posição na memória."
"Type Hinting","Sintaxe para anotar tipos de variáveis e funções (PEP 484), melhorando legibilidade e ferramentas de análise."
"ABC (Abstract Base Classes)","Classes abstratas que definem interfaces usando o módulo `abc`."
"PEP 8","Guia de estilo oficial para código Python, cobrindo convenções de formatação."
"EAFP vs LBYL","Estilos de programação: ""É mais fácil pedir perdão do que permissão"" (try/except) vs. ""Olhe antes de pular"" (ifs)."
"GIL (Global Interpreter Lock)","Mecanismo que limita a execução de threads Python a uma por vez, afetando concorrência em CPU."
"Estrutura Condicional","A palavra reservada `if` faz um desvio no código caso o statement for verdadeiro, e o código, para estar dentro do `if` tem que estar corretamente identado."
